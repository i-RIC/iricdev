<?xml version="1.0" encoding="utf-8" ?>
<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <Import Project="programs.prop" />

  <PropertyGroup>
    <INSTALL_DIR>lib\install</INSTALL_DIR>
    <SRC_DIR>lib\src</SRC_DIR>
  </PropertyGroup>

  <PropertyGroup>
    <VTK_MAJMIN>$([System.Text.RegularExpressions.Regex]::Match($(VTK_VER), `[0-9]\d*\.[0-9]\d*`))</VTK_MAJMIN>
    <HDF5_MAJMIN>$([System.Text.RegularExpressions.Regex]::Match($(HDF5_VER), `[0-9]\d*\.[0-9]\d*`))</HDF5_MAJMIN>
    <CGNSLIB_MAJMIN>$([System.Text.RegularExpressions.Regex]::Match($(CGNSLIB_VER), `[0-9]\d*\.[0-9]\d*`))</CGNSLIB_MAJMIN>
    <CGNSLIB_VER Condition=" '$(CGNSLIB_VER)' == '3.2.1' " >$(CGNSLIB_VER)-patch1</CGNSLIB_VER>
  </PropertyGroup>

  <Target Name="all" DependsOnTargets="shapelib-build;qwt-build;gdal-build;vtk-build;proj-build;netcdf-build;iriclib-build;iriclib-adf-build;cgnslib-build;cgnslib-adf-build;hdf5-build;geos-build;yaml-cpp-build;boost-src;expat-build;udunits-build;openssl-build">
    <Exec Command="create-files.cmd" />
  </Target>

  <!-- all release except vtk-build-release(36:21)-->
  <Target Name="appveyor-release" DependsOnTargets="shapelib-build-release;qwt-build;gdal-build-release;proj-build;netcdf-build-release;iriclib-build-release;iriclib-adf-build-release;cgnslib-build-release;cgnslib-adf-build-release;hdf5-build-release;geos-build-release;yaml-cpp-build-release-appveyor;expat-build-release;udunits-build-release;openssl-build-release">
    <Exec Command="create-files.cmd" />
  </Target>

  <!-- all debug except vtk-build-debug(36:21)-->
  <Target Name="appveyor-debug" DependsOnTargets="shapelib-build-debug;qwt-build;gdal-build-debug;proj-build;netcdf-build-debug;iriclib-build-debug;iriclib-adf-build-debug;cgnslib-build-debug;cgnslib-adf-build-debug;hdf5-build-debug;geos-build-debug;yaml-cpp-build-debug-appveyor;expat-build-debug;udunits-build-debug;openssl-build-debug">
    <Exec Command="create-files.cmd" />
  </Target>

  <!-- all release adf-->
  <Target Name="appveyor-adf-release" DependsOnTargets="iriclib-adf-build-release;cgnslib-adf-build-release">
    <Exec Command="create-adf-files.cmd" />
  </Target>

  <!-- all debug adf-->
  <Target Name="appveyor-adf-debug" DependsOnTargets="iriclib-adf-build-debug;cgnslib-adf-build-debug">
    <Exec Command="create-adf-files.cmd" />
  </Target>

  <Target Name="download" DependsOnTargets="shapelib-download;qwt-download;gdal-download;vtk-download;proj-download;netcdf-download;iriclib-download;cgnslib-download;hdf5-download;geos-download;yaml-cpp-download;boost-download;expat-download;udunits-download;openssl-download">
  </Target>

  <!-- shapelib -->

  <Target Name="shapelib-build" DependsOnTargets="shapelib-build-debug;shapelib-build-release" />

  <Target Name="shapelib-build-release" DependsOnTargets="shapelib-src" Condition="!Exists('$(INSTALL_DIR)\shapelib-$(SHAPELIB_VER)\release')">
    <Exec Command="nmake -f makefile.vc clean" WorkingDirectory="$(SRC_DIR)\shapelib-$(SHAPELIB_VER)" />
    <Exec Command="nmake -f makefile.vc" WorkingDirectory="$(SRC_DIR)\shapelib-$(SHAPELIB_VER)" />
    <ItemGroup>
      <OutputFiles Include="$(SRC_DIR)\shapelib-$(SHAPELIB_VER)\shapefil.h" />
      <OutputFiles Include="$(SRC_DIR)\shapelib-$(SHAPELIB_VER)\*.exe" />
      <OutputFiles Include="$(SRC_DIR)\shapelib-$(SHAPELIB_VER)\*.exp" />
      <OutputFiles Include="$(SRC_DIR)\shapelib-$(SHAPELIB_VER)\*.dll" />
      <OutputFiles Include="$(SRC_DIR)\shapelib-$(SHAPELIB_VER)\*.lib" />
    </ItemGroup>
    <Copy SourceFiles="@(OutputFiles)" DestinationFolder="$(INSTALL_DIR)\shapelib-$(SHAPELIB_VER)\release" />
  </Target>

  <Target Name="shapelib-build-debug" DependsOnTargets="shapelib-src" Condition="!Exists('$(INSTALL_DIR)\shapelib-$(SHAPELIB_VER)\debug')">
    <Exec Command="nmake -f makefile.vc clean" WorkingDirectory="$(SRC_DIR)\shapelib-$(SHAPELIB_VER)" />
    <Exec Command="nmake -f makefile.vc CFLAGS=&quot;/nologo /Ox /MDd /DSHAPELIB_DLLEXPORT&quot;" WorkingDirectory="$(SRC_DIR)\shapelib-$(SHAPELIB_VER)" />
    <ItemGroup>
      <OutputFiles Include="$(SRC_DIR)\shapelib-$(SHAPELIB_VER)\shapefil.h" />
      <OutputFiles Include="$(SRC_DIR)\shapelib-$(SHAPELIB_VER)\*.exe" />
      <OutputFiles Include="$(SRC_DIR)\shapelib-$(SHAPELIB_VER)\*.exp" />
      <OutputFiles Include="$(SRC_DIR)\shapelib-$(SHAPELIB_VER)\*.dll" />
      <OutputFiles Include="$(SRC_DIR)\shapelib-$(SHAPELIB_VER)\*.lib" />
    </ItemGroup>
    <Copy SourceFiles="@(OutputFiles)" DestinationFolder="$(INSTALL_DIR)\shapelib-$(SHAPELIB_VER)\debug" />
  </Target>

  <Target Name="shapelib-src" DependsOnTargets="shapelib-download" Condition="!Exists('$(SRC_DIR)\shapelib-$(SHAPELIB_VER)')">
    <Exec Command="7z x shapelib-$(SHAPELIB_VER).zip -o$(SRC_DIR)"/>
  </Target>

  <Target Name="shapelib-download" Condition="!Exists('shapelib-$(SHAPELIB_VER).zip')">
    <Message Text="Downloading shapelib-$(SHAPELIB_VER).zip" />
    <Exec Command="$(CURL) http://download.osgeo.org/shapelib/shapelib-$(SHAPELIB_VER).zip" />
  </Target>

  <!-- qwt -->

  <Target Name="qwt-build" DependsOnTargets="qwt-src" Condition="!Exists('$(INSTALL_DIR)\qwt-$(QWT_VER)\lib')">
    <PropertyGroup>
      <topdir>$(MSBuildProjectDirectory)</topdir>
    </PropertyGroup>
    <Exec Command="qmake" WorkingDirectory="$(topdir)\$(SRC_DIR)\qwt-$(QWT_VER)" />
    <Exec Command="nmake all" WorkingDirectory="$(topdir)\$(SRC_DIR)\qwt-$(QWT_VER)" />
    <Exec Command="nmake install" WorkingDirectory="$(topdir)\$(SRC_DIR)\qwt-$(QWT_VER)" />
    <Exec Command="xcopy c:\Qwt-$(QWT_VER) $(INSTALL_DIR)\Qwt-$(QWT_VER) /I/S/E" />
    <Exec Command="rmdir /q /s c:\Qwt-$(QWT_VER)" />
  </Target>

  <Target Name="qwt-src" DependsOnTargets="qwt-download" Condition="!Exists('$(SRC_DIR)\qwt-$(QWT_VER)')">
    <Exec Command="7z x qwt-$(QWT_VER).zip -o$(SRC_DIR)"/>
  </Target>

  <Target Name="qwt-download" Condition="!Exists('qwt-$(QWT_VER).zip')">
    <Message Text="Downloading qwt-$(QWT_VER).zip" />
    <Exec Command="$(CURL) https://sourceforge.net/projects/qwt/files/qwt/$(QWT_VER)/qwt-$(QWT_VER).zip" />
  </Target>

  <!-- gdal -->

  <Target Name="gdal-build" DependsOnTargets="gdal-build-debug;gdal-build-release" />

  <Target Name="gdal-build-debug" DependsOnTargets="gdal-src;netcdf-build-debug" Condition="!Exists('$(INSTALL_DIR)\gdal-$(GDAL_VER)\debug')">
    <PropertyGroup>
      <topdir>$(MSBuildProjectDirectory)</topdir>
    </PropertyGroup>
    <Exec Command="rd /s /q c:\warmerda" Condition="Exists('c:\warmerda')" />
    <MakeDir Directories="c:\warmerda\bld" />
    <Exec Command="nmake -f makefile.vc WIN64=YES MSVC_VER=1800 clean" WorkingDirectory="$(topdir)\$(SRC_DIR)\gdal-$(GDAL_VER)" />
    <Exec Command="nmake -f makefile.vc DEBUG=1 WIN64=YES MSVC_VER=1800 NETCDF_PLUGIN=YES NETCDF_SETTING=YES NETCDF_LIB=$(topdir)\$(INSTALL_DIR)\netcdf-$(NETCDF_VER)\debug\lib\netcdf.lib NETCDF_INC_DIR=$(topdir)\$(INSTALL_DIR)\netcdf-$(NETCDF_VER)\debug\include NETCDF_HAS_NC4=YES" WorkingDirectory="$(topdir)\$(SRC_DIR)\gdal-$(GDAL_VER)" />
    <Exec Command="nmake -f makefile.vc DEBUG=1 WIN64=YES MSVC_VER=1800 NETCDF_PLUGIN=YES NETCDF_SETTING=YES NETCDF_LIB=$(topdir)\$(INSTALL_DIR)\netcdf-$(NETCDF_VER)\debug\lib\netcdf.lib NETCDF_INC_DIR=$(topdir)\$(INSTALL_DIR)\netcdf-$(NETCDF_VER)\debug\include NETCDF_HAS_NC4=YES devinstall" WorkingDirectory="$(topdir)\$(SRC_DIR)\gdal-$(GDAL_VER)" />
    <MakeDir Directories="$(INSTALL_DIR)\gdal-$(GDAL_VER)" />
    <Exec Command="xcopy c:\warmerda\bld $(INSTALL_DIR)\gdal-$(GDAL_VER)\debug /I/S/E" />
    <Exec Command="rmdir /q /s c:\warmerda" />
  </Target>

  <Target Name="gdal-build-release" DependsOnTargets="gdal-src;netcdf-build-release" Condition="!Exists('$(INSTALL_DIR)\gdal-$(GDAL_VER)\release')">
    <PropertyGroup>
      <topdir>$(MSBuildProjectDirectory)</topdir>
    </PropertyGroup>
    <Exec Command="rd /s /q c:\warmerda" Condition="Exists('c:\warmerda')" />
    <MakeDir Directories="c:\warmerda\bld" />
    <Exec Command="nmake -f makefile.vc WIN64=YES MSVC_VER=1800 clean" WorkingDirectory="$(topdir)\$(SRC_DIR)\gdal-$(GDAL_VER)" />
    <Exec Command="nmake -f makefile.vc WIN64=YES MSVC_VER=1800 NETCDF_PLUGIN=YES NETCDF_SETTING=YES NETCDF_LIB=$(topdir)\$(INSTALL_DIR)\netcdf-$(NETCDF_VER)\release\lib\netcdf.lib NETCDF_INC_DIR=$(topdir)\$(INSTALL_DIR)\netcdf-$(NETCDF_VER)\release\include NETCDF_HAS_NC4=YES" WorkingDirectory="$(topdir)\$(SRC_DIR)\gdal-$(GDAL_VER)" />
    <Exec Command="nmake -f makefile.vc WIN64=YES MSVC_VER=1800 NETCDF_PLUGIN=YES NETCDF_SETTING=YES NETCDF_LIB=$(topdir)\$(INSTALL_DIR)\netcdf-$(NETCDF_VER)\release\lib\netcdf.lib NETCDF_INC_DIR=$(topdir)\$(INSTALL_DIR)\netcdf-$(NETCDF_VER)\release\include NETCDF_HAS_NC4=YES devinstall" WorkingDirectory="$(topdir)\$(SRC_DIR)\gdal-$(GDAL_VER)" />
    <MakeDir Directories="$(INSTALL_DIR)\gdal-$(GDAL_VER)" />
    <Exec Command="xcopy c:\warmerda\bld $(INSTALL_DIR)\gdal-$(GDAL_VER)\release /I/S/E" />
    <Exec Command="rmdir /q /s c:\warmerda" />
  </Target>

  <Target Name="gdal-src" DependsOnTargets="gdal-download" Condition="!Exists('$(SRC_DIR)\gdal-$(GDAL_VER)')">
    <Exec Command="7z x gdal-$(GDAL_VER).tar.gz -so | 7z x -si -ttar -o$(SRC_DIR)"/>
  </Target>

  <Target Name="gdal-download" Condition="!Exists('gdal-$(GDAL_VER).tar.gz')">
    <Message Text="Downloading gdal-$(GDAL_VER).tar.gz" />
    <Exec Command="$(CURL) http://download.osgeo.org/gdal/$(GDAL_VER)/gdal-$(GDAL_VER).tar.gz" />
  </Target>

  <!-- vtk -->

  <Target Name="vtk-build" DependsOnTargets="vtk-build-debug;vtk-build-release;vtk-build-debug-leaks" />

  <Target Name="vtk-build-debug" DependsOnTargets="vtk-src" Condition="!Exists('$(INSTALL_DIR)\vtk-$(VTK_VER)\debug')">
    <Exec Command="ctest -S build-vtk.cmake -DCONF_DIR:STRING=debug -DCTEST_CMAKE_GENERATOR:STRING=$(GENERATOR) -C Debug -VV -O $(SGEN)-vtk-debug.log"/>
  </Target>

  <Target Name="vtk-build-release" DependsOnTargets="vtk-src" Condition="!Exists('$(INSTALL_DIR)\vtk-$(VTK_VER)\release')">
    <Exec Command="ctest -S build-vtk.cmake -DCONF_DIR:STRING=release -DCTEST_CMAKE_GENERATOR:STRING=$(GENERATOR) -C Release -VV -O $(SGEN)-vtk-release.log"/>
  </Target>

  <Target Name="vtk-build-debug-leaks" DependsOnTargets="vtk-src" Condition="!Exists('$(INSTALL_DIR)\vtk-$(VTK_VER)\debug-vtk-leaks')">
    <Exec Command="ctest -S build-vtk.cmake -DCONF_DIR:STRING=debug-vtk-leaks -DCTEST_CMAKE_GENERATOR:STRING=$(GENERATOR) -C Debug -VV -O $(SGEN)-vtk-debug-leaks.log"/>
  </Target>

  <Target Name="vtk-src" DependsOnTargets="vtk-download" Condition="!Exists('$(SRC_DIR)\VTK-$(VTK_VER)')">
    <Exec Command="7z x VTK-$(VTK_VER).zip -o$(SRC_DIR)"/>
  </Target>

  <Target Name="vtk-download" Condition="!Exists('VTK-$(VTK_VER).zip')">
    <Message Text="Downloading VTK-$(VTK_VER).zip" />
    <Exec Command="$(CURL) https://www.vtk.org/files/release/$(VTK_MAJMIN)/VTK-$(VTK_VER).zip" />
  </Target>

  <!-- proj -->

  <Target Name="proj-build" DependsOnTargets="proj-src" Condition="!Exists('$(INSTALL_DIR)\proj-$(PROJ_VER)\release')">
    <PropertyGroup>
      <topdir>$(MSBuildProjectDirectory)</topdir>
    </PropertyGroup>
    <MakeDir Directories="$(topdir)\lib\install\proj-$(PROJ_VER)"/>
    <Exec Command="nmake -f makefile.vc INSTDIR=$(topdir)\lib\install\proj-$(PROJ_VER)\release" WorkingDirectory="$(topdir)\$(SRC_DIR)\proj-$(PROJ_VER)"/>
    <Exec Command="nmake -f makefile.vc INSTDIR=$(topdir)\lib\install\proj-$(PROJ_VER)\release install-all" WorkingDirectory="$(topdir)\$(SRC_DIR)\proj-$(PROJ_VER)"/>
  </Target>

  <Target Name="proj-src" DependsOnTargets="proj-download" Condition="!Exists('$(SRC_DIR)\proj-$(PROJ_VER)')">
    <Exec Command="7z x proj-$(PROJ_VER).zip -o$(SRC_DIR)"/>
  </Target>

  <Target Name="proj-download" Condition="!Exists('proj-$(PROJ_VER).zip')">
    <Message Text="Downloading proj-$(PROJ_VER).zip" />
    <Exec Command="$(CURL) http://download.osgeo.org/proj/proj-$(PROJ_VER).zip" />
  </Target>

  <!-- netcdf -->

  <Target Name="netcdf-build" DependsOnTargets="netcdf-build-debug;netcdf-build-release" />

  <Target Name="netcdf-build-debug" DependsOnTargets="netcdf-src;hdf5-build-debug" Condition="!Exists('$(INSTALL_DIR)\netcdf-$(NETCDF_VER)\debug')">
    <Exec Command="ctest -S build-netcdf.cmake -DCONF_DIR:STRING=debug -DCTEST_CMAKE_GENERATOR:STRING=$(GENERATOR) -C Debug -VV -O $(SGEN)-netcdf-debug.log"/>
  </Target>

  <Target Name="netcdf-build-release" DependsOnTargets="netcdf-src;hdf5-build-release" Condition="!Exists('$(INSTALL_DIR)\netcdf-$(NETCDF_VER)\release')">
    <Exec Command="ctest -S build-netcdf.cmake -DCONF_DIR:STRING=release -DCTEST_CMAKE_GENERATOR:STRING=$(GENERATOR) -C Release -VV -O $(SGEN)-netcdf-release.log"/>
  </Target>

  <Target Name="netcdf-src" DependsOnTargets="netcdf-download" Condition="!Exists('$(SRC_DIR)\netcdf-$(NETCDF_VER)')">
    <Exec Command="7z x netcdf-$(NETCDF_VER).zip -o$(SRC_DIR)" />
  </Target>

  <Target Name="netcdf-download" Condition="!Exists('netcdf-$(NETCDF_VER).zip')">
    <Message Text="Downloading netcdf-$(NETCDF_VER).zip" />
    <Exec Command="$(CURL) ftp://ftp.unidata.ucar.edu/pub/netcdf/netcdf-$(NETCDF_VER).zip" />
  </Target>

  <!-- iriclib -->

  <Target Name="iriclib-build" DependsOnTargets="iriclib-build-debug;iriclib-build-release" />

  <Target Name="iriclib-build-debug" DependsOnTargets="iriclib-src;cgnslib-build-debug" Condition="!Exists('$(INSTALL_DIR)\iriclib-$(IRICLIB_VER)\debug')">
    <Exec Command="ctest -S build-iriclib.cmake -DCONF_DIR:STRING=debug -DCTEST_CMAKE_GENERATOR:STRING=$(GENERATOR) -C Debug -VV -O $(SGEN)-iriclib-debug.log"/>
  </Target>

  <Target Name="iriclib-build-release" DependsOnTargets="iriclib-src;cgnslib-build-release" Condition="!Exists('$(INSTALL_DIR)\iriclib-$(IRICLIB_VER)\release')">
    <Exec Command="ctest -S build-iriclib.cmake -DCONF_DIR:STRING=release -DCTEST_CMAKE_GENERATOR:STRING=$(GENERATOR) -C Release -VV -O $(SGEN)-iriclib-release.log"/>
  </Target>

  <Target Name="iriclib-src" DependsOnTargets="iriclib-download" Condition="!Exists('$(SRC_DIR)\iriclib-$(IRICLIB_VER)')">
    <Exec Command="7z x iriclib-$(IRICLIB_VER).zip -o$(SRC_DIR)" />
    <Exec Command="ren $(SRC_DIR)\iriclib-$(IRICLIB_VER) iriclib-$(IRICLIB_VER)"/>
  </Target>

  <Target Name="iriclib-download" Condition="!Exists('iriclib-$(IRICLIB_VER).zip')">
    <Message Text="Downloading iriclib_$(IRICLIB_VER).zip" />
    <Exec Command="$(CURL) https://github.com/i-RIC/iriclib/archive/v$(IRICLIB_VER).zip" />
    <Move SourceFiles="v$(IRICLIB_VER).zip" DestinationFiles="iriclib-$(IRICLIB_VER).zip"/>
  </Target>

  <!-- appveyor-iriclib-artifacts -->

  <Target Name="appveyor-iriclib-artifacts" DependsOnTargets="iriclib-git-build-release">
    <Copy SourceFiles="$(INSTALL_DIR)\cgnslib-$(CGNSLIB_VER)\release\lib\cgnsdll.lib"
          DestinationFiles="$(SRC_DIR)\iriclib-git\_artifacts\libs\cgnsdll_x64_ifort.lib"
    />
    <Copy SourceFiles="$(INSTALL_DIR)\cgnslib-$(CGNSLIB_VER)\release\include\cgnslib_f.h"
          DestinationFiles="$(SRC_DIR)\iriclib-git\_artifacts\libs\cgnslib_f.h"
    />
    <Copy SourceFiles="$(SRC_DIR)\iriclib-git\_build_release\INSTALL\include\iriclib_f.h"
          DestinationFiles="$(SRC_DIR)\iriclib-git\_artifacts\libs\iriclib_f.h"
    />
    <Copy SourceFiles="$(SRC_DIR)\iriclib-git\_build_release\INSTALL\lib\iriclib.lib"
          DestinationFiles="$(SRC_DIR)\iriclib-git\_artifacts\libs\iriclib_x64_ifort.lib"
    />
    <Exec Command="7z a libs.zip libs\."
          WorkingDirectory="$(SRC_DIR)\iriclib-git\_artifacts"
    />
  </Target>

  <!-- iriclib-git -->

  <Target Name="iriclib-git-build" DependsOnTargets="iriclib-git-build-debug;iriclib-git-build-release" />

  <Target Name="iriclib-git-build-debug" DependsOnTargets="iriclib-git-clone;cgnslib-build-debug">
    <RemoveDir Directories="$(SRC_DIR)\iriclib-git\_build_debug"/>
    <Exec Command="ctest -S iriclib-git.cmake -DCONF_DIR:STRING=debug -DCTEST_CMAKE_GENERATOR:STRING=$(GENERATOR) -C Debug -VV -O $(SGEN)-iriclib-git-debug.log"/>
  </Target>

  <Target Name="iriclib-git-build-release" DependsOnTargets="iriclib-git-clone;cgnslib-build-release">
    <RemoveDir Directories="$(SRC_DIR)\iriclib-git\_build_release"/>
    <Exec Command="ctest -S iriclib-git.cmake -DCONF_DIR:STRING=release -DCTEST_CMAKE_GENERATOR:STRING=$(GENERATOR) -C Release -VV -O $(SGEN)-iriclib-git-release.log"/>
  </Target>

  <Target Name="iriclib-git-clone" Condition="!Exists('$(SRC_DIR)\iriclib-git')">
    <Message Text="Cloning https://github.com/i-RIC/iriclib.git" />
    <Exec Command="git clone https://github.com/i-RIC/iriclib.git lib/src/iriclib-git" />
  </Target>

  <!-- cgnslib -->

  <Target Name="cgnslib-build" DependsOnTargets="cgnslib-build-debug;cgnslib-build-release" />

  <Target Name="cgnslib-build-debug" DependsOnTargets="cgnslib-src;hdf5-build-debug" Condition="!Exists('$(INSTALL_DIR)\cgnslib-$(CGNSLIB_VER)\debug')">
    <Exec Command="ctest -S build-cgnslib.cmake -DCONF_DIR:STRING=debug -DCTEST_CMAKE_GENERATOR:STRING=$(GENERATOR) -C Debug -VV -O $(SGEN)-cgnslib-debug.log"/>
  </Target>

  <Target Name="cgnslib-build-release" DependsOnTargets="cgnslib-src;hdf5-build-release" Condition="!Exists('$(INSTALL_DIR)\cgnslib-$(CGNSLIB_VER)\release')">
    <Exec Command="ctest -S build-cgnslib.cmake -DCONF_DIR:STRING=release -DCTEST_CMAKE_GENERATOR:STRING=$(GENERATOR) -C Release -VV -O $(SGEN)-cgnslib-release.log"/>
  </Target>

  <Target Name="cgnslib-src" DependsOnTargets="cgnslib-download" Condition="!Exists('$(SRC_DIR)\cgnslib-$(CGNSLIB_VER)')">
    <Exec Command="7z x cgnslib_$(CGNSLIB_VER).tar.gz -so | 7z x -si -ttar -o$(SRC_DIR)" Condition=" '$(CGNSLIB_VER)'!='3.2.1-patch1' "/>
    <Exec Command="git clone --branch v3.2.1-patch1 https://github.com/scharlton2/CGNS.git lib/src/cgnslib-$(CGNSLIB_VER)" Condition=" '$(CGNSLIB_VER)'=='3.2.1-patch1' "/>
  </Target>

  <Target Name="cgnslib-download" Condition="!Exists('cgnslib_$(CGNSLIB_VER).tar.gz')">
    <Message Text="Downloading cgnslib_$(CGNSLIB_VER).tar.gz" Condition=" '$(CGNSLIB_VER)'!='3.2.1-patch1' "/>
    <Exec Command="$(CURL) https://downloads.sourceforge.net/project/cgns/cgnslib_$(CGNSLIB_MAJMIN)/cgnslib_$(CGNSLIB_VER).tar.gz" Condition=" '$(CGNSLIB_VER)'!='3.2.1-patch1' "/>
  </Target>

  <!-- hdf5 -->

  <Target Name="hdf5-build" DependsOnTargets="hdf5-build-debug;hdf5-build-release" />

  <Target Name="hdf5-build-debug" DependsOnTargets="hdf5-src" Condition="!Exists('$(INSTALL_DIR)\hdf5-$(HDF5_VER)\debug')">
    <Exec Command="ctest -S build-hdf5.cmake -DCONF_DIR:STRING=debug -DCTEST_CMAKE_GENERATOR:STRING=$(GENERATOR) -C Debug -VV -O $(SGEN)-hdf5-debug.log"/>
  </Target>

  <Target Name="hdf5-build-release" DependsOnTargets="hdf5-src" Condition="!Exists('$(INSTALL_DIR)\hdf5-$(HDF5_VER)\release')">
    <Exec Command="ctest -S build-hdf5.cmake -DCONF_DIR:STRING=release -DCTEST_CMAKE_GENERATOR:STRING=$(GENERATOR) -C Release -VV -O $(SGEN)-hdf5-release.log"/>
  </Target>

  <Target Name="hdf5-src" DependsOnTargets="hdf5-download" Condition="!Exists('$(SRC_DIR)\hdf5-$(HDF5_VER)')">
    <Exec Command="7z x hdf5-$(HDF5_VER).zip -o$(SRC_DIR)" />
  </Target>

  <Target Name="hdf5-download" Condition="!Exists('hdf5-$(HDF5_VER).zip')">
    <Message Text="Downloading hdf5-$(HDF5_VER).zip" />
    <Exec Command="$(CURL) https://support.hdfgroup.org/ftp/HDF5/releases/hdf5-$(HDF5_MAJMIN)/hdf5-$(HDF5_VER)/cmake/SZip.tar.gz" />
    <Exec Command="$(CURL) https://support.hdfgroup.org/ftp/HDF5/releases/hdf5-$(HDF5_MAJMIN)/hdf5-$(HDF5_VER)/cmake/ZLib.tar.gz" />
    <Exec Command="$(CURL) https://support.hdfgroup.org/ftp/HDF5/releases/hdf5-$(HDF5_MAJMIN)/hdf5-$(HDF5_VER)/src/hdf5-$(HDF5_VER).zip" />
  </Target>

  <!-- geos -->

  <Target Name="geos-build" DependsOnTargets="geos-build-debug;geos-build-release" />

  <Target Name="geos-build-debug" DependsOnTargets="geos-src" Condition="!Exists('$(INSTALL_DIR)\geos-$(GEOS_VER)\debug')">
    <Exec Command="ctest -S build-geos.cmake -DCONF_DIR:STRING=debug -DCTEST_CMAKE_GENERATOR:STRING=$(GENERATOR) -C Debug -VV -O $(SGEN)-geos-debug.log"/>
  </Target>

  <Target Name="geos-build-release" DependsOnTargets="geos-src" Condition="!Exists('$(INSTALL_DIR)\geos-$(GEOS_VER)\release')">
    <Exec Command="ctest -S build-geos.cmake -DCONF_DIR:STRING=release -DCTEST_CMAKE_GENERATOR:STRING=$(GENERATOR) -C Release -VV -O $(SGEN)-geos-release.log"/>
  </Target>

  <Target Name="geos-src" DependsOnTargets="geos-download" Condition="!Exists('$(SRC_DIR)\geos-$(GEOS_VER)')">
    <Exec Command="7z x geos-$(GEOS_VER).tar.bz2 -so | 7z x -si -ttar -o$(SRC_DIR)"/>
  </Target>

  <Target Name="geos-download" Condition="!Exists('geos-$(GEOS_VER).tar.bz2')">
    <Message Text="Downloading geos-$(GEOS_VER).tar.bz2" />
    <Exec Command="$(CURL) http://download.osgeo.org/geos/geos-$(GEOS_VER).tar.bz2" />
  </Target>

  <!-- yaml-cpp -->

  <Target Name="yaml-cpp-build-appveyor" DependsOnTargets="yaml-cpp-build-debug-appveyor;yaml-cpp-build-release-appveyor" />

  <Target Name="yaml-cpp-build-debug-appveyor" DependsOnTargets="yaml-cpp-src" Condition="!Exists('$(INSTALL_DIR)\yaml-cpp-$(YAML_CPP_VER)\debug')">
    <Exec Command="ctest -S build-yaml-cpp.cmake -DCONF_DIR:STRING=debug -DCTEST_CMAKE_GENERATOR:STRING=$(GENERATOR) -C Debug -VV -O $(SGEN)-yaml-cpp-debug.log"/>
  </Target>

  <Target Name="yaml-cpp-build-release-appveyor" DependsOnTargets="yaml-cpp-src" Condition="!Exists('$(INSTALL_DIR)\yaml-cpp-$(YAML_CPP_VER)\release')">
    <Exec Command="ctest -S build-yaml-cpp.cmake -DCONF_DIR:STRING=release -DCTEST_CMAKE_GENERATOR:STRING=$(GENERATOR) -C Release -VV -O $(SGEN)-yaml-cpp-release.log"/>
  </Target>

  <Target Name="yaml-cpp-build" DependsOnTargets="yaml-cpp-build-debug;yaml-cpp-build-release" />

  <Target Name="yaml-cpp-build-debug" DependsOnTargets="yaml-cpp-src;boost-src" Condition="!Exists('$(INSTALL_DIR)\yaml-cpp-$(YAML_CPP_VER)\debug')">
    <Exec Command="ctest -S build-yaml-cpp.cmake -DCONF_DIR:STRING=debug -DCTEST_CMAKE_GENERATOR:STRING=$(GENERATOR) -C Debug -VV -O $(SGEN)-yaml-cpp-debug.log"/>
  </Target>

  <Target Name="yaml-cpp-build-release" DependsOnTargets="yaml-cpp-src;boost-src" Condition="!Exists('$(INSTALL_DIR)\yaml-cpp-$(YAML_CPP_VER)\release')">
    <Exec Command="ctest -S build-yaml-cpp.cmake -DCONF_DIR:STRING=release -DCTEST_CMAKE_GENERATOR:STRING=$(GENERATOR) -C Release -VV -O $(SGEN)-yaml-cpp-release.log"/>
  </Target>

  <Target Name="yaml-cpp-src" DependsOnTargets="yaml-cpp-download" Condition="!Exists('$(SRC_DIR)\yaml-cpp-$(YAML_CPP_VER)')">
    <Exec Command="7z x yaml-cpp-release-$(YAML_CPP_VER).zip -o$(SRC_DIR)"/>
    <Exec Command="ren $(SRC_DIR)\yaml-cpp-release-$(YAML_CPP_VER) yaml-cpp-$(YAML_CPP_VER)"/>
  </Target>

  <Target Name="yaml-cpp-download" Condition="!Exists('yaml-cpp-release-$(YAML_CPP_VER).zip')">
    <Message Text="Downloading release-$(YAML_CPP_VER).zip" />
    <Exec Command="$(CURL) https://github.com/jbeder/yaml-cpp/archive/release-$(YAML_CPP_VER).zip" />
    <Copy SourceFiles="release-$(YAML_CPP_VER).zip" DestinationFiles="yaml-cpp-release-$(YAML_CPP_VER).zip" />
    <Delete Files="release-$(YAML_CPP_VER).zip" />
  </Target>

  <!-- boost -->

  <Target Name="boost-src" DependsOnTargets="boost-download" Condition="!Exists('$(SRC_DIR)\boost-$(BOOST_VER)')">
    <Exec Command="7z x boost_$(BOOST_UVER).7z -o$(SRC_DIR)"/>
    <Exec Command="ren $(SRC_DIR)\boost_$(BOOST_UVER) boost-$(BOOST_VER)"/>
  </Target>

  <Target Name="boost-download" Condition="!Exists('boost_$(BOOST_UVER).7z')">
    <Message Text="Downloading boost_$(BOOST_UVER).7z" />
    <Exec Command="$(CURL) https://sourceforge.net/projects/boost/files/boost/$(BOOST_VER)/boost_$(BOOST_UVER).7z" />
  </Target>

  <!-- expat -->

  <Target Name="expat-build" DependsOnTargets="expat-build-debug;expat-build-release" />

  <Target Name="expat-build-debug" DependsOnTargets="expat-src" Condition="!Exists('$(INSTALL_DIR)\expat-$(EXPAT_VER)\debug')">
    <Exec Command="ctest -S build-expat.cmake -DCONF_DIR:STRING=debug -DCTEST_CMAKE_GENERATOR:STRING=$(GENERATOR) -C Debug -VV -O $(SGEN)-expat-debug.log"/>
  </Target>

  <Target Name="expat-build-release" DependsOnTargets="expat-src" Condition="!Exists('$(INSTALL_DIR)\expat-$(EXPAT_VER)\release')">
    <Exec Command="ctest -S build-expat.cmake -DCONF_DIR:STRING=release -DCTEST_CMAKE_GENERATOR:STRING=$(GENERATOR) -C Release -VV -O $(SGEN)-expat-release.log"/>
  </Target>

  <Target Name="expat-src" DependsOnTargets="expat-download" Condition="!Exists('$(SRC_DIR)\expat-$(EXPAT_VER)')">
    <Exec Command="7z x expat-$(EXPAT_VER).zip -o$(SRC_DIR)"/>
    <Exec Command="ren $(SRC_DIR)\libexpat-$(EXPAT_UVER) expat-$(EXPAT_VER)"/>
  </Target>

  <Target Name="expat-download" Condition="!Exists('expat-$(EXPAT_VER).zip')">
    <Message Text="Downloading expat-$(EXPAT_VER).zip" />
    <Exec Command="$(CURL) https://github.com/libexpat/libexpat/archive/$(EXPAT_UVER).zip" />
    <Move SourceFiles="$(EXPAT_UVER).zip" DestinationFiles="expat-$(EXPAT_VER).zip"/>
  </Target>

  <!-- udunits -->

  <Target Name="udunits-build" DependsOnTargets="udunits-build-debug;udunits-build-release" />

  <Target Name="udunits-build-debug" DependsOnTargets="udunits-src;expat-build-debug" Condition="!Exists('$(INSTALL_DIR)\udunits-$(UDUNITS_VER)\debug')">
    <Exec Command="ctest -S build-udunits.cmake -DCONF_DIR:STRING=debug -DCTEST_CMAKE_GENERATOR:STRING=$(GENERATOR) -C Debug -VV -O $(SGEN)-udunits-debug.log"/>
  </Target>

  <Target Name="udunits-build-release" DependsOnTargets="udunits-src;expat-build-release" Condition="!Exists('$(INSTALL_DIR)\udunits-$(UDUNITS_VER)\release')">
    <Exec Command="ctest -S build-udunits.cmake -DCONF_DIR:STRING=release -DCTEST_CMAKE_GENERATOR:STRING=$(GENERATOR) -C Release -VV -O $(SGEN)-udunits-release.log"/>
  </Target>

  <Target Name="udunits-src" DependsOnTargets="udunits-download" Condition="!Exists('$(SRC_DIR)\udunits-$(UDUNITS_VER)')">
    <Exec Command="7z x udunits-$(UDUNITS_VER).tar.gz -so | 7z x -si -ttar -o$(SRC_DIR)"/>
  </Target>

  <Target Name="udunits-download" Condition="!Exists('udunits-$(UDUNITS_VER).tar.gz')">
    <Message Text="Downloading udunits-$(UDUNITS_VER).tar.gz" />
    <Exec Command="$(CURL) ftp://ftp.unidata.ucar.edu/pub/udunits/udunits-$(UDUNITS_VER).tar.gz" />
  </Target>

  <!-- OpenSSL -->

  <Import Project="openssl.targets" />

  <!-- iriclib-adf -->

  <Target Name="iriclib-adf-build" DependsOnTargets="iriclib-adf-build-debug;iriclib-adf-build-release" />

  <Target Name="iriclib-adf-build-debug" DependsOnTargets="iriclib-adf-src;cgnslib-adf-build-debug" Condition="!Exists('$(INSTALL_DIR)\iriclib-adf-$(IRICLIB_ADF_VER)\debug')">
    <Exec Command="ctest -S build-iriclib-adf.cmake -DCONF_DIR:STRING=debug -DCTEST_CMAKE_GENERATOR:STRING=$(GENERATOR) -C Debug -VV -O $(SGEN)-iriclib-adf-debug.log"/>
  </Target>

  <Target Name="iriclib-adf-build-release" DependsOnTargets="iriclib-adf-src;cgnslib-adf-build-release" Condition="!Exists('$(INSTALL_DIR)\iriclib-adf-$(IRICLIB_ADF_VER)\release')">
    <Exec Command="ctest -S build-iriclib-adf.cmake -DCONF_DIR:STRING=release -DCTEST_CMAKE_GENERATOR:STRING=$(GENERATOR) -C Release -VV -O $(SGEN)-iriclib-adf-release.log"/>
  </Target>

  <Target Name="iriclib-adf-src" DependsOnTargets="iriclib-adf-download" Condition="!Exists('$(SRC_DIR)\iriclib-adf-$(IRICLIB_ADF_VER)')">
    <Exec Command="7z x iriclib-adf-$(IRICLIB_ADF_VER).zip -o$(SRC_DIR)" />
  </Target>

  <Target Name="iriclib-adf-download" Condition="!Exists('iriclib-adf-$(IRICLIB_ADF_VER).zip')">
    <Message Text="Downloading iriclib_$(IRICLIB_ADF_VER).zip" />
    <Exec Command="$(CURL) https://github.com/scharlton2/iriclib/archive/adf-$(IRICLIB_ADF_VER).zip" />
    <Move SourceFiles="adf-$(IRICLIB_ADF_VER).zip" DestinationFiles="iriclib-adf-$(IRICLIB_ADF_VER).zip"/>
  </Target>

  <!-- cgnslib-adf -->

  <Target Name="cgnslib-adf-build" DependsOnTargets="cgnslib-adf-build-debug;cgnslib-adf-build-release" />

  <Target Name="cgnslib-adf-build-debug" DependsOnTargets="cgnslib-src" Condition="!Exists('$(INSTALL_DIR)\cgnslib-adf-$(CGNSLIB_VER)\debug')">
    <Exec Command="ctest -S build-cgnslib-adf.cmake -DCONF_DIR:STRING=debug -DCTEST_CMAKE_GENERATOR:STRING=$(GENERATOR) -C Debug -VV -O $(SGEN)-cgnslib-adf-debug.log"/>
  </Target>

  <Target Name="cgnslib-adf-build-release" DependsOnTargets="cgnslib-src" Condition="!Exists('$(INSTALL_DIR)\cgnslib-adf-$(CGNSLIB_VER)\release')">
    <Exec Command="ctest -S build-cgnslib-adf.cmake -DCONF_DIR:STRING=release -DCTEST_CMAKE_GENERATOR:STRING=$(GENERATOR) -C Release -VV -O $(SGEN)-cgnslib-adf-release.log"/>
  </Target>

  <!-- dump variables -->

  <Target Name="dump">
    <Message Text="BOOST_UVER=$(BOOST_UVER)" />
    <Message Text="BOOST_VER=$(BOOST_VER)" />
    <Message Text="BUILD_TOOLS=$(BUILD_TOOLS)" />
    <Message Text="CGNSLIB_MAJMIN=$(CGNSLIB_MAJMIN)" />
    <Message Text="CGNSLIB_VER=$(CGNSLIB_VER)" />
    <Message Text="CURL=$(CURL)" />
    <Message Text="EXPAT_VER=$(EXPAT_VER)" />
    <Message Text="GDAL_VER=$(GDAL_VER)" />
    <Message Text="GEOS_VER=$(GEOS_VER)" />
    <Message Text="HDF5_MAJMIN=$(HDF5_MAJMIN)" />
    <Message Text="HDF5_VER=$(HDF5_VER)" />
    <Message Text="INSTALL_DIR=$(INSTALL_DIR)" />
    <Message Text="IRICLIB_VER=$(IRICLIB_VER)" />
    <Message Text="IRICLIB_ADF_SVER=$(IRICLIB_ADF_SVER)" />
    <Message Text="IRICLIB_ADF_VER=$(IRICLIB_ADF_VER)" />
    <Message Text="NETCDF_VER=$(NETCDF_VER)" />
    <Message Text="PROJ_VER=$(PROJ_VER)" />
    <Message Text="QWT_VER=$(QWT_VER)" />
    <Message Text="SHAPELIB_VER=$(SHAPELIB_VER)" />
    <Message Text="SRC_DIR=$(SRC_DIR)" />
    <Message Text="UDUNITS_VER=$(UDUNITS_VER)" />
    <Message Text="VTK_MAJMIN=$(VTK_MAJMIN)" />
    <Message Text="VTK_VER=$(VTK_VER)" />
    <Message Text="YAML_CPP_VER=$(YAML_CPP_VER)" />
    <Message Text="Environment:" />
    <Exec Command="set" />
  </Target>

</Project>
